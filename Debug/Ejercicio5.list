
Ejercicio5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a00  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002b0c  08002b0c  00003b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b98  08002b98  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b98  08002b98  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b98  08002b98  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b98  08002b98  00003b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b9c  08002b9c  00003b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002ba0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08002bfc  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08002bfc  00004280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ae0  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5c  00000000  00000000  0000cb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0000e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fb  00000000  00000000  0000eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001775d  00000000  00000000  0000f39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a399  00000000  00000000  00026af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008714e  00000000  00000000  00030e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7fdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  000b8024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ba3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002af4 	.word	0x08002af4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002af4 	.word	0x08002af4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa98 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80e 	bl	8000174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ce 	bl	80002f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f864 	bl	8000228 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000160:	f000 f8a0 	bl	80002a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000164:	4802      	ldr	r0, [pc, #8]	@ (8000170 <main+0x24>)
 8000166:	f000 fbc7 	bl	80008f8 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016a:	bf00      	nop
 800016c:	e7fd      	b.n	800016a <main+0x1e>
 800016e:	bf00      	nop
 8000170:	20000078 	.word	0x20000078

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b094      	sub	sp, #80	@ 0x50
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800017e:	2228      	movs	r2, #40	@ 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f002 f826 	bl	80021d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	f107 0314 	add.w	r3, r7, #20
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
 8000196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ae:	2300      	movs	r3, #0
 80001b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b2:	2301      	movs	r3, #1
 80001b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b6:	2302      	movs	r3, #2
 80001b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001c0:	2300      	movs	r3, #0
 80001c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 f94d 	bl	8001468 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80001d4:	f000 f8f6 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fbb9 	bl	800196c <HAL_RCC_ClockConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000200:	f000 f8e0 	bl	80003c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000204:	2302      	movs	r3, #2
 8000206:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fd3a 	bl	8001c88 <HAL_RCCEx_PeriphCLKConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800021a:	f000 f8d3 	bl	80003c4 <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3750      	adds	r7, #80	@ 0x50
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000238:	4b18      	ldr	r3, [pc, #96]	@ (800029c <MX_ADC1_Init+0x74>)
 800023a:	4a19      	ldr	r2, [pc, #100]	@ (80002a0 <MX_ADC1_Init+0x78>)
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023e:	4b17      	ldr	r3, [pc, #92]	@ (800029c <MX_ADC1_Init+0x74>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000244:	4b15      	ldr	r3, [pc, #84]	@ (800029c <MX_ADC1_Init+0x74>)
 8000246:	2201      	movs	r2, #1
 8000248:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800024a:	4b14      	ldr	r3, [pc, #80]	@ (800029c <MX_ADC1_Init+0x74>)
 800024c:	2200      	movs	r2, #0
 800024e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <MX_ADC1_Init+0x74>)
 8000252:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000256:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000258:	4b10      	ldr	r3, [pc, #64]	@ (800029c <MX_ADC1_Init+0x74>)
 800025a:	2200      	movs	r2, #0
 800025c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025e:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <MX_ADC1_Init+0x74>)
 8000260:	2201      	movs	r2, #1
 8000262:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000264:	480d      	ldr	r0, [pc, #52]	@ (800029c <MX_ADC1_Init+0x74>)
 8000266:	f000 fa6f 	bl	8000748 <HAL_ADC_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f8a8 	bl	80003c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000274:	2307      	movs	r3, #7
 8000276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000278:	2301      	movs	r3, #1
 800027a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800027c:	2307      	movs	r3, #7
 800027e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	@ (800029c <MX_ADC1_Init+0x74>)
 8000286:	f000 fcc1 	bl	8000c0c <HAL_ADC_ConfigChannel>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000290:	f000 f898 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000078 	.word	0x20000078
 80002a0:	40012400 	.word	0x40012400

080002a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002a8:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002aa:	4a12      	ldr	r2, [pc, #72]	@ (80002f4 <MX_USART3_UART_Init+0x50>)
 80002ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80002ae:	4b10      	ldr	r3, [pc, #64]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80002b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80002c8:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002ca:	220c      	movs	r2, #12
 80002cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ce:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d4:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80002da:	4805      	ldr	r0, [pc, #20]	@ (80002f0 <MX_USART3_UART_Init+0x4c>)
 80002dc:	f001 fd8a 	bl	8001df4 <HAL_UART_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80002e6:	f000 f86d 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	200000a8 	.word	0x200000a8
 80002f4:	40004800 	.word	0x40004800

080002f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_GPIO_Init+0x58>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a13      	ldr	r2, [pc, #76]	@ (8000350 <MX_GPIO_Init+0x58>)
 8000304:	f043 0320 	orr.w	r3, r3, #32
 8000308:	6193      	str	r3, [r2, #24]
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_GPIO_Init+0x58>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	f003 0320 	and.w	r3, r3, #32
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_GPIO_Init+0x58>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a0d      	ldr	r2, [pc, #52]	@ (8000350 <MX_GPIO_Init+0x58>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <MX_GPIO_Init+0x58>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0304 	and.w	r3, r3, #4
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <MX_GPIO_Init+0x58>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a07      	ldr	r2, [pc, #28]	@ (8000350 <MX_GPIO_Init+0x58>)
 8000334:	f043 0308 	orr.w	r3, r3, #8
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <MX_GPIO_Init+0x58>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  valor_AD = HAL_ADC_GetValue(&hadc1);
 800035c:	4813      	ldr	r0, [pc, #76]	@ (80003ac <HAL_ADC_ConvCpltCallback+0x58>)
 800035e:	f000 fb81 	bl	8000a64 <HAL_ADC_GetValue>
 8000362:	4603      	mov	r3, r0
 8000364:	b29a      	uxth	r2, r3
 8000366:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000368:	801a      	strh	r2, [r3, #0]
  if (abs(valor_AD_prev - valor_AD) > 50)
 800036a:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <HAL_ADC_ConvCpltCallback+0x60>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	461a      	mov	r2, r3
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	bfb8      	it	lt
 800037a:	425b      	neglt	r3, r3
 800037c:	2b32      	cmp	r3, #50	@ 0x32
 800037e:	dd0d      	ble.n	800039c <HAL_ADC_ConvCpltCallback+0x48>
  {
	  sprintf(mensaje, "ADC CH7 value: %d. Max sample value: 4096\n\r", valor_AD);
 8000380:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	461a      	mov	r2, r3
 8000386:	490c      	ldr	r1, [pc, #48]	@ (80003b8 <HAL_ADC_ConvCpltCallback+0x64>)
 8000388:	480c      	ldr	r0, [pc, #48]	@ (80003bc <HAL_ADC_ConvCpltCallback+0x68>)
 800038a:	f001 ff03 	bl	8002194 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)mensaje, sizeof(mensaje), HAL_MAX_DELAY);
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	223c      	movs	r2, #60	@ 0x3c
 8000394:	4909      	ldr	r1, [pc, #36]	@ (80003bc <HAL_ADC_ConvCpltCallback+0x68>)
 8000396:	480a      	ldr	r0, [pc, #40]	@ (80003c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000398:	f001 fd7c 	bl	8001e94 <HAL_UART_Transmit>
  }

  valor_AD_prev = valor_AD;
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <HAL_ADC_ConvCpltCallback+0x5c>)
 800039e:	881a      	ldrh	r2, [r3, #0]
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <HAL_ADC_ConvCpltCallback+0x60>)
 80003a2:	801a      	strh	r2, [r3, #0]

}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000078 	.word	0x20000078
 80003b0:	200000f0 	.word	0x200000f0
 80003b4:	200000f2 	.word	0x200000f2
 80003b8:	08002b0c 	.word	0x08002b0c
 80003bc:	200000f4 	.word	0x200000f4
 80003c0:	200000a8 	.word	0x200000a8

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	@ (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	@ (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000406:	4b0a      	ldr	r3, [pc, #40]	@ (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	@ (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a18      	ldr	r2, [pc, #96]	@ (80004b0 <HAL_ADC_MspInit+0x7c>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d129      	bne.n	80004a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000454:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <HAL_ADC_MspInit+0x80>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a16      	ldr	r2, [pc, #88]	@ (80004b4 <HAL_ADC_MspInit+0x80>)
 800045a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <HAL_ADC_MspInit+0x80>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <HAL_ADC_MspInit+0x80>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a10      	ldr	r2, [pc, #64]	@ (80004b4 <HAL_ADC_MspInit+0x80>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <HAL_ADC_MspInit+0x80>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000488:	2303      	movs	r3, #3
 800048a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4809      	ldr	r0, [pc, #36]	@ (80004b8 <HAL_ADC_MspInit+0x84>)
 8000494:	f000 fe64 	bl	8001160 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2100      	movs	r1, #0
 800049c:	2012      	movs	r0, #18
 800049e:	f000 fe28 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004a2:	2012      	movs	r0, #18
 80004a4:	f000 fe41 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40012400 	.word	0x40012400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010800 	.word	0x40010800

080004bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000548 <HAL_UART_MspInit+0x8c>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d131      	bne.n	8000540 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80004dc:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <HAL_UART_MspInit+0x90>)
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	4a1a      	ldr	r2, [pc, #104]	@ (800054c <HAL_UART_MspInit+0x90>)
 80004e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004e6:	61d3      	str	r3, [r2, #28]
 80004e8:	4b18      	ldr	r3, [pc, #96]	@ (800054c <HAL_UART_MspInit+0x90>)
 80004ea:	69db      	ldr	r3, [r3, #28]
 80004ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f4:	4b15      	ldr	r3, [pc, #84]	@ (800054c <HAL_UART_MspInit+0x90>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a14      	ldr	r2, [pc, #80]	@ (800054c <HAL_UART_MspInit+0x90>)
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b12      	ldr	r3, [pc, #72]	@ (800054c <HAL_UART_MspInit+0x90>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0308 	and.w	r3, r3, #8
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800050c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000510:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000512:	2302      	movs	r3, #2
 8000514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000516:	2303      	movs	r3, #3
 8000518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4619      	mov	r1, r3
 8000520:	480b      	ldr	r0, [pc, #44]	@ (8000550 <HAL_UART_MspInit+0x94>)
 8000522:	f000 fe1d 	bl	8001160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800052a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4805      	ldr	r0, [pc, #20]	@ (8000550 <HAL_UART_MspInit+0x94>)
 800053c:	f000 fe10 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40004800 	.word	0x40004800
 800054c:	40021000 	.word	0x40021000
 8000550:	40010c00 	.word	0x40010c00

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <NMI_Handler+0x4>

0800055c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <MemManage_Handler+0x4>

0800056c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <UsageFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f8b4 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <ADC1_2_IRQHandler+0x10>)
 80005b2:	f000 fa63 	bl	8000a7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000078 	.word	0x20000078

080005c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	4a14      	ldr	r2, [pc, #80]	@ (800061c <_sbrk+0x5c>)
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <_sbrk+0x60>)
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <_sbrk+0x64>)
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <_sbrk+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d207      	bcs.n	8000600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f0:	f001 fdf8 	bl	80021e4 <__errno>
 80005f4:	4603      	mov	r3, r0
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e009      	b.n	8000614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	4a05      	ldr	r2, [pc, #20]	@ (8000624 <_sbrk+0x64>)
 8000610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20005000 	.word	0x20005000
 8000620:	00000400 	.word	0x00000400
 8000624:	20000130 	.word	0x20000130
 8000628:	20000280 	.word	0x20000280

0800062c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000638:	f7ff fff8 	bl	800062c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800063e:	490c      	ldr	r1, [pc, #48]	@ (8000670 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000640:	4a0c      	ldr	r2, [pc, #48]	@ (8000674 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000654:	4c09      	ldr	r4, [pc, #36]	@ (800067c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000662:	f001 fdc5 	bl	80021f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fd71 	bl	800014c <main>
  bx lr
 800066a:	4770      	bx	lr
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000674:	08002ba0 	.word	0x08002ba0
  ldr r2, =_sbss
 8000678:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800067c:	20000280 	.word	0x20000280

08000680 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <CAN1_RX1_IRQHandler>
	...

08000684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <HAL_Init+0x28>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a07      	ldr	r2, [pc, #28]	@ (80006ac <HAL_Init+0x28>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 fd21 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069a:	200f      	movs	r0, #15
 800069c:	f000 f808 	bl	80006b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a0:	f7ff fe96 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_InitTick+0x54>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <HAL_InitTick+0x58>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fd39 	bl	8001146 <HAL_SYSTICK_Config>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	e00e      	b.n	80006fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d80a      	bhi.n	80006fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f000 fd01 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f0:	4a06      	ldr	r2, [pc, #24]	@ (800070c <HAL_InitTick+0x5c>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e000      	b.n	80006fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000000 	.word	0x20000000
 8000708:	20000008 	.word	0x20000008
 800070c:	20000004 	.word	0x20000004

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <HAL_IncTick+0x1c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <HAL_IncTick+0x20>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a03      	ldr	r2, [pc, #12]	@ (8000730 <HAL_IncTick+0x20>)
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	20000008 	.word	0x20000008
 8000730:	20000134 	.word	0x20000134

08000734 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b02      	ldr	r3, [pc, #8]	@ (8000744 <HAL_GetTick+0x10>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	20000134 	.word	0x20000134

08000748 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e0be      	b.n	80008e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000774:	2b00      	cmp	r3, #0
 8000776:	d109      	bne.n	800078c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fe54 	bl	8000434 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 fb8f 	bl	8000eb0 <ADC_ConversionStop_Disable>
 8000792:	4603      	mov	r3, r0
 8000794:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f040 8099 	bne.w	80008d6 <HAL_ADC_Init+0x18e>
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f040 8095 	bne.w	80008d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80007b4:	f023 0302 	bic.w	r3, r3, #2
 80007b8:	f043 0202 	orr.w	r2, r3, #2
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7b1b      	ldrb	r3, [r3, #12]
 80007ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007e0:	d003      	beq.n	80007ea <HAL_ADC_Init+0xa2>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d102      	bne.n	80007f0 <HAL_ADC_Init+0xa8>
 80007ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ee:	e000      	b.n	80007f2 <HAL_ADC_Init+0xaa>
 80007f0:	2300      	movs	r3, #0
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7d1b      	ldrb	r3, [r3, #20]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d119      	bne.n	8000834 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7b1b      	ldrb	r3, [r3, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d109      	bne.n	800081c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	3b01      	subs	r3, #1
 800080e:	035a      	lsls	r2, r3, #13
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	4313      	orrs	r3, r2
 8000814:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	e00b      	b.n	8000834 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000820:	f043 0220 	orr.w	r2, r3, #32
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082c:	f043 0201 	orr.w	r2, r3, #1
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	430a      	orrs	r2, r1
 8000846:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <HAL_ADC_Init+0x1a8>)
 8000850:	4013      	ands	r3, r2
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	430b      	orrs	r3, r1
 800085a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000864:	d003      	beq.n	800086e <HAL_ADC_Init+0x126>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d104      	bne.n	8000878 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	3b01      	subs	r3, #1
 8000874:	051b      	lsls	r3, r3, #20
 8000876:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	430a      	orrs	r2, r1
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <HAL_ADC_Init+0x1ac>)
 8000894:	4013      	ands	r3, r2
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	429a      	cmp	r2, r3
 800089a:	d10b      	bne.n	80008b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008a6:	f023 0303 	bic.w	r3, r3, #3
 80008aa:	f043 0201 	orr.w	r2, r3, #1
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008b2:	e018      	b.n	80008e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008b8:	f023 0312 	bic.w	r3, r3, #18
 80008bc:	f043 0210 	orr.w	r2, r3, #16
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008c8:	f043 0201 	orr.w	r2, r3, #1
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d4:	e007      	b.n	80008e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008da:	f043 0210 	orr.w	r2, r3, #16
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	ffe1f7fd 	.word	0xffe1f7fd
 80008f4:	ff1f0efe 	.word	0xff1f0efe

080008f8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800090a:	2b01      	cmp	r3, #1
 800090c:	d101      	bne.n	8000912 <HAL_ADC_Start_IT+0x1a>
 800090e:	2302      	movs	r3, #2
 8000910:	e0a0      	b.n	8000a54 <HAL_ADC_Start_IT+0x15c>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fa6e 	bl	8000dfc <ADC_Enable>
 8000920:	4603      	mov	r3, r0
 8000922:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 808f 	bne.w	8000a4a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000930:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000934:	f023 0301 	bic.w	r3, r3, #1
 8000938:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a45      	ldr	r2, [pc, #276]	@ (8000a5c <HAL_ADC_Start_IT+0x164>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d105      	bne.n	8000956 <HAL_ADC_Start_IT+0x5e>
 800094a:	4b45      	ldr	r3, [pc, #276]	@ (8000a60 <HAL_ADC_Start_IT+0x168>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d115      	bne.n	8000982 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800095a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800096c:	2b00      	cmp	r3, #0
 800096e:	d026      	beq.n	80009be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000974:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000978:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000980:	e01d      	b.n	80009be <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000986:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a33      	ldr	r2, [pc, #204]	@ (8000a60 <HAL_ADC_Start_IT+0x168>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d004      	beq.n	80009a2 <HAL_ADC_Start_IT+0xaa>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a5c <HAL_ADC_Start_IT+0x164>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d10d      	bne.n	80009be <HAL_ADC_Start_IT+0xc6>
 80009a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a60 <HAL_ADC_Start_IT+0x168>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ce:	f023 0206 	bic.w	r2, r3, #6
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009d6:	e002      	b.n	80009de <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f06f 0202 	mvn.w	r2, #2
 80009ee:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0220 	orr.w	r2, r2, #32
 80009fe:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000a0a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000a0e:	d113      	bne.n	8000a38 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a14:	4a11      	ldr	r2, [pc, #68]	@ (8000a5c <HAL_ADC_Start_IT+0x164>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d105      	bne.n	8000a26 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_ADC_Start_IT+0x168>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d108      	bne.n	8000a38 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	e00c      	b.n	8000a52 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	e003      	b.n	8000a52 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40012800 	.word	0x40012800
 8000a60:	40012400 	.word	0x40012400

08000a64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	f003 0320 	and.w	r3, r3, #32
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d03e      	beq.n	8000b1c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d039      	beq.n	8000b1c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d105      	bne.n	8000ac0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000aca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ace:	d11d      	bne.n	8000b0c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d119      	bne.n	8000b0c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0220 	bic.w	r2, r2, #32
 8000ae6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d105      	bne.n	8000b0c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fc21 	bl	8000354 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f06f 0212 	mvn.w	r2, #18
 8000b1a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d04d      	beq.n	8000bc2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d048      	beq.n	8000bc2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d105      	bne.n	8000b48 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b40:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000b52:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000b56:	d012      	beq.n	8000b7e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d125      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b70:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b74:	d11d      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d119      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b8c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d105      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000baa:	f043 0201 	orr.w	r2, r3, #1
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f9bd 	bl	8000f32 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f06f 020c 	mvn.w	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d012      	beq.n	8000bf2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00d      	beq.n	8000bf2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f809 	bl	8000bfa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f06f 0201 	mvn.w	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d101      	bne.n	8000c2c <HAL_ADC_ConfigChannel+0x20>
 8000c28:	2302      	movs	r3, #2
 8000c2a:	e0dc      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1da>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d81c      	bhi.n	8000c76 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b05      	subs	r3, #5
 8000c4e:	221f      	movs	r2, #31
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4019      	ands	r1, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	3b05      	subs	r3, #5
 8000c68:	fa00 f203 	lsl.w	r2, r0, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c74:	e03c      	b.n	8000cf0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b0c      	cmp	r3, #12
 8000c7c:	d81c      	bhi.n	8000cb8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3b23      	subs	r3, #35	@ 0x23
 8000c90:	221f      	movs	r2, #31
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4019      	ands	r1, r3
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3b23      	subs	r3, #35	@ 0x23
 8000caa:	fa00 f203 	lsl.w	r2, r0, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cb6:	e01b      	b.n	8000cf0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3b41      	subs	r3, #65	@ 0x41
 8000cca:	221f      	movs	r2, #31
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4019      	ands	r1, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3b41      	subs	r3, #65	@ 0x41
 8000ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b09      	cmp	r3, #9
 8000cf6:	d91c      	bls.n	8000d32 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68d9      	ldr	r1, [r3, #12]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	3b1e      	subs	r3, #30
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4019      	ands	r1, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6898      	ldr	r0, [r3, #8]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	3b1e      	subs	r3, #30
 8000d24:	fa00 f203 	lsl.w	r2, r0, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	e019      	b.n	8000d66 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6919      	ldr	r1, [r3, #16]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	2207      	movs	r2, #7
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	4019      	ands	r1, r3
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6898      	ldr	r0, [r3, #8]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b10      	cmp	r3, #16
 8000d6c:	d003      	beq.n	8000d76 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d72:	2b11      	cmp	r3, #17
 8000d74:	d132      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000df0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d125      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d126      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000d9c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	d11a      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a13      	ldr	r2, [pc, #76]	@ (8000df8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	0c9a      	lsrs	r2, r3, #18
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dbc:	e002      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f9      	bne.n	8000dbe <HAL_ADC_ConfigChannel+0x1b2>
 8000dca:	e007      	b.n	8000ddc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd0:	f043 0220 	orr.w	r2, r3, #32
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40012400 	.word	0x40012400
 8000df4:	20000000 	.word	0x20000000
 8000df8:	431bde83 	.word	0x431bde83

08000dfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d040      	beq.n	8000e9c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0201 	orr.w	r2, r2, #1
 8000e28:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <ADC_Enable+0xac>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000eac <ADC_Enable+0xb0>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	0c9b      	lsrs	r3, r3, #18
 8000e36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e38:	e002      	b.n	8000e40 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f9      	bne.n	8000e3a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e46:	f7ff fc75 	bl	8000734 <HAL_GetTick>
 8000e4a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e4c:	e01f      	b.n	8000e8e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e4e:	f7ff fc71 	bl	8000734 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d918      	bls.n	8000e8e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d011      	beq.n	8000e8e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6e:	f043 0210 	orr.w	r2, r3, #16
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7a:	f043 0201 	orr.w	r2, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e007      	b.n	8000e9e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d1d8      	bne.n	8000e4e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	431bde83 	.word	0x431bde83

08000eb0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d12e      	bne.n	8000f28 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000eda:	f7ff fc2b 	bl	8000734 <HAL_GetTick>
 8000ede:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ee0:	e01b      	b.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ee2:	f7ff fc27 	bl	8000734 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d914      	bls.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d10d      	bne.n	8000f1a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f02:	f043 0210 	orr.w	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e007      	b.n	8000f2a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d0dc      	beq.n	8000ee2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4906      	ldr	r1, [pc, #24]	@ (8000fdc <__NVIC_EnableIRQ+0x34>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff90 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff2d 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff42 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff90 	bl	8001034 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5f 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff35 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b08b      	sub	sp, #44	@ 0x2c
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e169      	b.n	8001448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001174:	2201      	movs	r2, #1
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8158 	bne.w	8001442 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a9a      	ldr	r2, [pc, #616]	@ (8001400 <HAL_GPIO_Init+0x2a0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d05e      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 800119c:	4a98      	ldr	r2, [pc, #608]	@ (8001400 <HAL_GPIO_Init+0x2a0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d875      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011a2:	4a98      	ldr	r2, [pc, #608]	@ (8001404 <HAL_GPIO_Init+0x2a4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d058      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011a8:	4a96      	ldr	r2, [pc, #600]	@ (8001404 <HAL_GPIO_Init+0x2a4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d86f      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011ae:	4a96      	ldr	r2, [pc, #600]	@ (8001408 <HAL_GPIO_Init+0x2a8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d052      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011b4:	4a94      	ldr	r2, [pc, #592]	@ (8001408 <HAL_GPIO_Init+0x2a8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d869      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011ba:	4a94      	ldr	r2, [pc, #592]	@ (800140c <HAL_GPIO_Init+0x2ac>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d04c      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011c0:	4a92      	ldr	r2, [pc, #584]	@ (800140c <HAL_GPIO_Init+0x2ac>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d863      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011c6:	4a92      	ldr	r2, [pc, #584]	@ (8001410 <HAL_GPIO_Init+0x2b0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d046      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011cc:	4a90      	ldr	r2, [pc, #576]	@ (8001410 <HAL_GPIO_Init+0x2b0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d85d      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011d2:	2b12      	cmp	r3, #18
 80011d4:	d82a      	bhi.n	800122c <HAL_GPIO_Init+0xcc>
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d859      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011da:	a201      	add	r2, pc, #4	@ (adr r2, 80011e0 <HAL_GPIO_Init+0x80>)
 80011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e0:	0800125b 	.word	0x0800125b
 80011e4:	08001235 	.word	0x08001235
 80011e8:	08001247 	.word	0x08001247
 80011ec:	08001289 	.word	0x08001289
 80011f0:	0800128f 	.word	0x0800128f
 80011f4:	0800128f 	.word	0x0800128f
 80011f8:	0800128f 	.word	0x0800128f
 80011fc:	0800128f 	.word	0x0800128f
 8001200:	0800128f 	.word	0x0800128f
 8001204:	0800128f 	.word	0x0800128f
 8001208:	0800128f 	.word	0x0800128f
 800120c:	0800128f 	.word	0x0800128f
 8001210:	0800128f 	.word	0x0800128f
 8001214:	0800128f 	.word	0x0800128f
 8001218:	0800128f 	.word	0x0800128f
 800121c:	0800128f 	.word	0x0800128f
 8001220:	0800128f 	.word	0x0800128f
 8001224:	0800123d 	.word	0x0800123d
 8001228:	08001251 	.word	0x08001251
 800122c:	4a79      	ldr	r2, [pc, #484]	@ (8001414 <HAL_GPIO_Init+0x2b4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001232:	e02c      	b.n	800128e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e029      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	3304      	adds	r3, #4
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e024      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	3308      	adds	r3, #8
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e01f      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	330c      	adds	r3, #12
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e01a      	b.n	8001290 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001262:	2304      	movs	r3, #4
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e013      	b.n	8001290 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001270:	2308      	movs	r3, #8
 8001272:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	611a      	str	r2, [r3, #16]
          break;
 800127a:	e009      	b.n	8001290 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800127c:	2308      	movs	r3, #8
 800127e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	615a      	str	r2, [r3, #20]
          break;
 8001286:	e003      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x130>
          break;
 800128e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2bff      	cmp	r3, #255	@ 0xff
 8001294:	d801      	bhi.n	800129a <HAL_GPIO_Init+0x13a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	e001      	b.n	800129e <HAL_GPIO_Init+0x13e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	@ 0xff
 80012a4:	d802      	bhi.n	80012ac <HAL_GPIO_Init+0x14c>
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x152>
 80012ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ae:	3b08      	subs	r3, #8
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	210f      	movs	r1, #15
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	401a      	ands	r2, r3
 80012c4:	6a39      	ldr	r1, [r7, #32]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80b1 	beq.w	8001442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001418 <HAL_GPIO_Init+0x2b8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001418 <HAL_GPIO_Init+0x2b8>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001418 <HAL_GPIO_Init+0x2b8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f8:	4a48      	ldr	r2, [pc, #288]	@ (800141c <HAL_GPIO_Init+0x2bc>)
 80012fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a40      	ldr	r2, [pc, #256]	@ (8001420 <HAL_GPIO_Init+0x2c0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1ec>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a3f      	ldr	r2, [pc, #252]	@ (8001424 <HAL_GPIO_Init+0x2c4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1e8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a3e      	ldr	r2, [pc, #248]	@ (8001428 <HAL_GPIO_Init+0x2c8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1e4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3d      	ldr	r2, [pc, #244]	@ (800142c <HAL_GPIO_Init+0x2cc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1e0>
 800133c:	2303      	movs	r3, #3
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001340:	2304      	movs	r3, #4
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001344:	2302      	movs	r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 800134c:	2300      	movs	r3, #0
 800134e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800135e:	492f      	ldr	r1, [pc, #188]	@ (800141c <HAL_GPIO_Init+0x2bc>)
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001378:	4b2d      	ldr	r3, [pc, #180]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	492c      	ldr	r1, [pc, #176]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	608b      	str	r3, [r1, #8]
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001386:	4b2a      	ldr	r3, [pc, #168]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	43db      	mvns	r3, r3
 800138e:	4928      	ldr	r1, [pc, #160]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 8001390:	4013      	ands	r3, r2
 8001392:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	4922      	ldr	r1, [pc, #136]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	491e      	ldr	r1, [pc, #120]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013c8:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4918      	ldr	r1, [pc, #96]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4914      	ldr	r1, [pc, #80]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d021      	beq.n	8001434 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	490e      	ldr	r1, [pc, #56]	@ (8001430 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e021      	b.n	8001442 <HAL_GPIO_Init+0x2e2>
 80013fe:	bf00      	nop
 8001400:	10320000 	.word	0x10320000
 8001404:	10310000 	.word	0x10310000
 8001408:	10220000 	.word	0x10220000
 800140c:	10210000 	.word	0x10210000
 8001410:	10120000 	.word	0x10120000
 8001414:	10110000 	.word	0x10110000
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00
 8001428:	40011000 	.word	0x40011000
 800142c:	40011400 	.word	0x40011400
 8001430:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_GPIO_Init+0x304>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	43db      	mvns	r3, r3
 800143c:	4909      	ldr	r1, [pc, #36]	@ (8001464 <HAL_GPIO_Init+0x304>)
 800143e:	4013      	ands	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	fa22 f303 	lsr.w	r3, r2, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	f47f ae8e 	bne.w	8001174 <HAL_GPIO_Init+0x14>
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	372c      	adds	r7, #44	@ 0x2c
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e272      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001488:	4b92      	ldr	r3, [pc, #584]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d00c      	beq.n	80014ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001494:	4b8f      	ldr	r3, [pc, #572]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d112      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
 80014a0:	4b8c      	ldr	r3, [pc, #560]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ac:	d10b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4b89      	ldr	r3, [pc, #548]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d06c      	beq.n	8001594 <HAL_RCC_OscConfig+0x12c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d168      	bne.n	8001594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e24c      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x76>
 80014d0:	4b80      	ldr	r3, [pc, #512]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a7f      	ldr	r2, [pc, #508]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e02e      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x98>
 80014e6:	4b7b      	ldr	r3, [pc, #492]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7a      	ldr	r2, [pc, #488]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b78      	ldr	r3, [pc, #480]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a77      	ldr	r2, [pc, #476]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0xbc>
 800150a:	4b72      	ldr	r3, [pc, #456]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a71      	ldr	r2, [pc, #452]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b6f      	ldr	r3, [pc, #444]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001524:	4b6b      	ldr	r3, [pc, #428]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6a      	ldr	r2, [pc, #424]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b68      	ldr	r3, [pc, #416]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a67      	ldr	r2, [pc, #412]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800153a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff f8f6 	bl	8000734 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff f8f2 	bl	8000734 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e200      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b5d      	ldr	r3, [pc, #372]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0xe4>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff f8e2 	bl	8000734 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff f8de 	bl	8000734 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	@ 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1ec      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	4b53      	ldr	r3, [pc, #332]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x10c>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d063      	beq.n	800166a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a2:	4b4c      	ldr	r3, [pc, #304]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ae:	4b49      	ldr	r3, [pc, #292]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d11c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
 80015ba:	4b46      	ldr	r3, [pc, #280]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e1c0      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b3d      	ldr	r3, [pc, #244]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4939      	ldr	r1, [pc, #228]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	e03a      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fc:	4b36      	ldr	r3, [pc, #216]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff f897 	bl	8000734 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff f893 	bl	8000734 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1a1      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	4b2d      	ldr	r3, [pc, #180]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4927      	ldr	r1, [pc, #156]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff f876 	bl	8000734 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff f872 	bl	8000734 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e180      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d03a      	beq.n	80016ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d019      	beq.n	80016b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <HAL_RCC_OscConfig+0x274>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff f856 	bl	8000734 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff f852 	bl	8000734 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e160      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 face 	bl	8001c4c <RCC_Delay>
 80016b0:	e01c      	b.n	80016ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_RCC_OscConfig+0x274>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f83c 	bl	8000734 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	e00f      	b.n	80016e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f838 	bl	8000734 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d908      	bls.n	80016e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e146      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	42420000 	.word	0x42420000
 80016dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b92      	ldr	r3, [pc, #584]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e9      	bne.n	80016c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a6 	beq.w	8001846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b8b      	ldr	r3, [pc, #556]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b88      	ldr	r3, [pc, #544]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a87      	ldr	r2, [pc, #540]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b85      	ldr	r3, [pc, #532]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b82      	ldr	r3, [pc, #520]	@ (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b7f      	ldr	r3, [pc, #508]	@ (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7e      	ldr	r2, [pc, #504]	@ (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7fe fff9 	bl	8000734 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7fe fff5 	bl	8000734 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	@ 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e103      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b75      	ldr	r3, [pc, #468]	@ (8001930 <HAL_RCC_OscConfig+0x4c8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x312>
 800176c:	4b6f      	ldr	r3, [pc, #444]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a6e      	ldr	r2, [pc, #440]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e02d      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x334>
 8001782:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a69      	ldr	r2, [pc, #420]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b67      	ldr	r3, [pc, #412]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a66      	ldr	r2, [pc, #408]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	e01c      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0x356>
 80017a4:	4b61      	ldr	r3, [pc, #388]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a60      	ldr	r2, [pc, #384]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	4b5e      	ldr	r3, [pc, #376]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a5d      	ldr	r2, [pc, #372]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 80017be:	4b5b      	ldr	r3, [pc, #364]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a5a      	ldr	r2, [pc, #360]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b58      	ldr	r3, [pc, #352]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a57      	ldr	r2, [pc, #348]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d015      	beq.n	800180a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7fe ffa9 	bl	8000734 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7fe ffa5 	bl	8000734 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0b1      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ee      	beq.n	80017e6 <HAL_RCC_OscConfig+0x37e>
 8001808:	e014      	b.n	8001834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7fe ff93 	bl	8000734 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7fe ff8f 	bl	8000734 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e09b      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	4b40      	ldr	r3, [pc, #256]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ee      	bne.n	8001812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183a:	4b3c      	ldr	r3, [pc, #240]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a3b      	ldr	r2, [pc, #236]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8087 	beq.w	800195e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001850:	4b36      	ldr	r3, [pc, #216]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d061      	beq.n	8001920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d146      	bne.n	80018f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <HAL_RCC_OscConfig+0x4cc>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7fe ff63 	bl	8000734 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7fe ff5f 	bl	8000734 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e06d      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	4b29      	ldr	r3, [pc, #164]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001898:	d108      	bne.n	80018ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4921      	ldr	r1, [pc, #132]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a19      	ldr	r1, [r3, #32]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	430b      	orrs	r3, r1
 80018be:	491b      	ldr	r1, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7fe ff33 	bl	8000734 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7fe ff2f 	bl	8000734 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e03d      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46a>
 80018f0:	e035      	b.n	800195e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7fe ff1c 	bl	8000734 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7fe ff18 	bl	8000734 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e026      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x498>
 800191e:	e01e      	b.n	800195e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e019      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
 800192c:	40021000 	.word	0x40021000
 8001930:	40007000 	.word	0x40007000
 8001934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_OscConfig+0x500>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	429a      	cmp	r2, r3
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0d0      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b6a      	ldr	r3, [pc, #424]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b67      	ldr	r3, [pc, #412]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	4965      	ldr	r1, [pc, #404]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b63      	ldr	r3, [pc, #396]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b59      	ldr	r3, [pc, #356]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a58      	ldr	r2, [pc, #352]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a52      	ldr	r2, [pc, #328]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b50      	ldr	r3, [pc, #320]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	494d      	ldr	r1, [pc, #308]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d040      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e073      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4936      	ldr	r1, [pc, #216]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7fe fe6a 	bl	8000734 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7fe fe66 	bl	8000734 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e053      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b27      	ldr	r3, [pc, #156]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d210      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0207 	bic.w	r2, r3, #7
 8001aa2:	4922      	ldr	r1, [pc, #136]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4916      	ldr	r1, [pc, #88]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	490e      	ldr	r1, [pc, #56]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afa:	f000 f821 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	490a      	ldr	r1, [pc, #40]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <HAL_RCC_ClockConfig+0x1cc>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <HAL_RCC_ClockConfig+0x1d0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fdc8 	bl	80006b0 <HAL_InitTick>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08002b38 	.word	0x08002b38
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x30>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x36>
 8001b6e:	e027      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	e027      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0c9b      	lsrs	r3, r3, #18
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0c5b      	lsrs	r3, r3, #17
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	4a11      	ldr	r2, [pc, #68]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba2:	fb03 f202 	mul.w	r2, r3, r2
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e004      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	613b      	str	r3, [r7, #16]
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bc2:	613b      	str	r3, [r7, #16]
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	693b      	ldr	r3, [r7, #16]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	007a1200 	.word	0x007a1200
 8001bdc:	08002b50 	.word	0x08002b50
 8001be0:	08002b60 	.word	0x08002b60
 8001be4:	003d0900 	.word	0x003d0900

08001be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b02      	ldr	r3, [pc, #8]	@ (8001bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff2 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	@ (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08002b48 	.word	0x08002b48

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0adb      	lsrs	r3, r3, #11
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	@ (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08002b48 	.word	0x08002b48

08001c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <RCC_Delay+0x34>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <RCC_Delay+0x38>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0a5b      	lsrs	r3, r3, #9
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c68:	bf00      	nop
  }
  while (Delay --);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f9      	bne.n	8001c68 <RCC_Delay+0x1c>
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000000 	.word	0x20000000
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d07d      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	61d3      	str	r3, [r2, #28]
 8001cc0:	4b49      	ldr	r3, [pc, #292]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b46      	ldr	r3, [pc, #280]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d118      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cdc:	4b43      	ldr	r3, [pc, #268]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a42      	ldr	r2, [pc, #264]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce8:	f7fe fd24 	bl	8000734 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cee:	e008      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf0:	f7fe fd20 	bl	8000734 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e06d      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d0e:	4b36      	ldr	r3, [pc, #216]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d02e      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d027      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d36:	4b2e      	ldr	r3, [pc, #184]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d42:	4a29      	ldr	r2, [pc, #164]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d014      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe fcef 	bl	8000734 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fceb 	bl	8000734 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e036      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ee      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4917      	ldr	r1, [pc, #92]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	4a13      	ldr	r2, [pc, #76]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	490b      	ldr	r1, [pc, #44]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4904      	ldr	r1, [pc, #16]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	42420440 	.word	0x42420440

08001df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e042      	b.n	8001e8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fb4e 	bl	80004bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2224      	movs	r2, #36	@ 0x24
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f91d 	bl	8002078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	@ 0x28
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d16d      	bne.n	8001f90 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_UART_Transmit+0x2c>
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e066      	b.n	8001f92 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2221      	movs	r2, #33	@ 0x21
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ed2:	f7fe fc2f 	bl	8000734 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	88fa      	ldrh	r2, [r7, #6]
 8001edc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	88fa      	ldrh	r2, [r7, #6]
 8001ee2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eec:	d108      	bne.n	8001f00 <HAL_UART_Transmit+0x6c>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d104      	bne.n	8001f00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	e003      	b.n	8001f08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f08:	e02a      	b.n	8001f60 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	@ 0x80
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f840 	bl	8001f9a <UART_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e036      	b.n	8001f92 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10b      	bne.n	8001f42 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e007      	b.n	8001f52 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1cf      	bne.n	8001f0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	2140      	movs	r1, #64	@ 0x40
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f810 	bl	8001f9a <UART_WaitOnFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e006      	b.n	8001f92 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b090      	sub	sp, #64	@ 0x40
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001faa:	e050      	b.n	800204e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d04c      	beq.n	800204e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <UART_WaitOnFlagUntilTimeout+0x30>
 8001fba:	f7fe fbbb 	bl	8000734 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d241      	bcs.n	800204e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fea:	637a      	str	r2, [r7, #52]	@ 0x34
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ff2:	e841 2300 	strex	r3, r2, [r1]
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1e5      	bne.n	8001fca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3314      	adds	r3, #20
 8002004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	e853 3f00 	ldrex	r3, [r3]
 800200c:	613b      	str	r3, [r7, #16]
   return(result);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3314      	adds	r3, #20
 800201c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800201e:	623a      	str	r2, [r7, #32]
 8002020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002022:	69f9      	ldr	r1, [r7, #28]
 8002024:	6a3a      	ldr	r2, [r7, #32]
 8002026:	e841 2300 	strex	r3, r2, [r1]
 800202a:	61bb      	str	r3, [r7, #24]
   return(result);
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e5      	bne.n	8001ffe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e00f      	b.n	800206e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4013      	ands	r3, r2
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	429a      	cmp	r2, r3
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	429a      	cmp	r2, r3
 800206a:	d09f      	beq.n	8001fac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3740      	adds	r7, #64	@ 0x40
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80020b2:	f023 030c 	bic.w	r3, r3, #12
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6812      	ldr	r2, [r2, #0]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	430b      	orrs	r3, r1
 80020be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a2c      	ldr	r2, [pc, #176]	@ (800218c <UART_SetConfig+0x114>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d103      	bne.n	80020e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020e0:	f7ff fda0 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	e002      	b.n	80020ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020e8:	f7ff fd88 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 80020ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	4a22      	ldr	r2, [pc, #136]	@ (8002190 <UART_SetConfig+0x118>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	0119      	lsls	r1, r3, #4
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	009a      	lsls	r2, r3, #2
 8002118:	441a      	add	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fbb2 f2f3 	udiv	r2, r2, r3
 8002124:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <UART_SetConfig+0x118>)
 8002126:	fba3 0302 	umull	r0, r3, r3, r2
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2064      	movs	r0, #100	@ 0x64
 800212e:	fb00 f303 	mul.w	r3, r0, r3
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	3332      	adds	r3, #50	@ 0x32
 8002138:	4a15      	ldr	r2, [pc, #84]	@ (8002190 <UART_SetConfig+0x118>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002144:	4419      	add	r1, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fbb2 f2f3 	udiv	r2, r2, r3
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <UART_SetConfig+0x118>)
 800215e:	fba3 0302 	umull	r0, r3, r3, r2
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2064      	movs	r0, #100	@ 0x64
 8002166:	fb00 f303 	mul.w	r3, r0, r3
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	3332      	adds	r3, #50	@ 0x32
 8002170:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <UART_SetConfig+0x118>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	440a      	add	r2, r1
 8002182:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40013800 	.word	0x40013800
 8002190:	51eb851f 	.word	0x51eb851f

08002194 <siprintf>:
 8002194:	b40e      	push	{r1, r2, r3}
 8002196:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800219a:	b500      	push	{lr}
 800219c:	b09c      	sub	sp, #112	@ 0x70
 800219e:	ab1d      	add	r3, sp, #116	@ 0x74
 80021a0:	9002      	str	r0, [sp, #8]
 80021a2:	9006      	str	r0, [sp, #24]
 80021a4:	9107      	str	r1, [sp, #28]
 80021a6:	9104      	str	r1, [sp, #16]
 80021a8:	4808      	ldr	r0, [pc, #32]	@ (80021cc <siprintf+0x38>)
 80021aa:	4909      	ldr	r1, [pc, #36]	@ (80021d0 <siprintf+0x3c>)
 80021ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80021b0:	9105      	str	r1, [sp, #20]
 80021b2:	6800      	ldr	r0, [r0, #0]
 80021b4:	a902      	add	r1, sp, #8
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	f000 f992 	bl	80024e0 <_svfiprintf_r>
 80021bc:	2200      	movs	r2, #0
 80021be:	9b02      	ldr	r3, [sp, #8]
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	b01c      	add	sp, #112	@ 0x70
 80021c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80021c8:	b003      	add	sp, #12
 80021ca:	4770      	bx	lr
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	ffff0208 	.word	0xffff0208

080021d4 <memset>:
 80021d4:	4603      	mov	r3, r0
 80021d6:	4402      	add	r2, r0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d100      	bne.n	80021de <memset+0xa>
 80021dc:	4770      	bx	lr
 80021de:	f803 1b01 	strb.w	r1, [r3], #1
 80021e2:	e7f9      	b.n	80021d8 <memset+0x4>

080021e4 <__errno>:
 80021e4:	4b01      	ldr	r3, [pc, #4]	@ (80021ec <__errno+0x8>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	2000000c 	.word	0x2000000c

080021f0 <__libc_init_array>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	2600      	movs	r6, #0
 80021f4:	4d0c      	ldr	r5, [pc, #48]	@ (8002228 <__libc_init_array+0x38>)
 80021f6:	4c0d      	ldr	r4, [pc, #52]	@ (800222c <__libc_init_array+0x3c>)
 80021f8:	1b64      	subs	r4, r4, r5
 80021fa:	10a4      	asrs	r4, r4, #2
 80021fc:	42a6      	cmp	r6, r4
 80021fe:	d109      	bne.n	8002214 <__libc_init_array+0x24>
 8002200:	f000 fc78 	bl	8002af4 <_init>
 8002204:	2600      	movs	r6, #0
 8002206:	4d0a      	ldr	r5, [pc, #40]	@ (8002230 <__libc_init_array+0x40>)
 8002208:	4c0a      	ldr	r4, [pc, #40]	@ (8002234 <__libc_init_array+0x44>)
 800220a:	1b64      	subs	r4, r4, r5
 800220c:	10a4      	asrs	r4, r4, #2
 800220e:	42a6      	cmp	r6, r4
 8002210:	d105      	bne.n	800221e <__libc_init_array+0x2e>
 8002212:	bd70      	pop	{r4, r5, r6, pc}
 8002214:	f855 3b04 	ldr.w	r3, [r5], #4
 8002218:	4798      	blx	r3
 800221a:	3601      	adds	r6, #1
 800221c:	e7ee      	b.n	80021fc <__libc_init_array+0xc>
 800221e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002222:	4798      	blx	r3
 8002224:	3601      	adds	r6, #1
 8002226:	e7f2      	b.n	800220e <__libc_init_array+0x1e>
 8002228:	08002b98 	.word	0x08002b98
 800222c:	08002b98 	.word	0x08002b98
 8002230:	08002b98 	.word	0x08002b98
 8002234:	08002b9c 	.word	0x08002b9c

08002238 <__retarget_lock_acquire_recursive>:
 8002238:	4770      	bx	lr

0800223a <__retarget_lock_release_recursive>:
 800223a:	4770      	bx	lr

0800223c <_free_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4605      	mov	r5, r0
 8002240:	2900      	cmp	r1, #0
 8002242:	d040      	beq.n	80022c6 <_free_r+0x8a>
 8002244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002248:	1f0c      	subs	r4, r1, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	bfb8      	it	lt
 800224e:	18e4      	addlt	r4, r4, r3
 8002250:	f000 f8de 	bl	8002410 <__malloc_lock>
 8002254:	4a1c      	ldr	r2, [pc, #112]	@ (80022c8 <_free_r+0x8c>)
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	b933      	cbnz	r3, 8002268 <_free_r+0x2c>
 800225a:	6063      	str	r3, [r4, #4]
 800225c:	6014      	str	r4, [r2, #0]
 800225e:	4628      	mov	r0, r5
 8002260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002264:	f000 b8da 	b.w	800241c <__malloc_unlock>
 8002268:	42a3      	cmp	r3, r4
 800226a:	d908      	bls.n	800227e <_free_r+0x42>
 800226c:	6820      	ldr	r0, [r4, #0]
 800226e:	1821      	adds	r1, r4, r0
 8002270:	428b      	cmp	r3, r1
 8002272:	bf01      	itttt	eq
 8002274:	6819      	ldreq	r1, [r3, #0]
 8002276:	685b      	ldreq	r3, [r3, #4]
 8002278:	1809      	addeq	r1, r1, r0
 800227a:	6021      	streq	r1, [r4, #0]
 800227c:	e7ed      	b.n	800225a <_free_r+0x1e>
 800227e:	461a      	mov	r2, r3
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	b10b      	cbz	r3, 8002288 <_free_r+0x4c>
 8002284:	42a3      	cmp	r3, r4
 8002286:	d9fa      	bls.n	800227e <_free_r+0x42>
 8002288:	6811      	ldr	r1, [r2, #0]
 800228a:	1850      	adds	r0, r2, r1
 800228c:	42a0      	cmp	r0, r4
 800228e:	d10b      	bne.n	80022a8 <_free_r+0x6c>
 8002290:	6820      	ldr	r0, [r4, #0]
 8002292:	4401      	add	r1, r0
 8002294:	1850      	adds	r0, r2, r1
 8002296:	4283      	cmp	r3, r0
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	d1e0      	bne.n	800225e <_free_r+0x22>
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4408      	add	r0, r1
 80022a2:	6010      	str	r0, [r2, #0]
 80022a4:	6053      	str	r3, [r2, #4]
 80022a6:	e7da      	b.n	800225e <_free_r+0x22>
 80022a8:	d902      	bls.n	80022b0 <_free_r+0x74>
 80022aa:	230c      	movs	r3, #12
 80022ac:	602b      	str	r3, [r5, #0]
 80022ae:	e7d6      	b.n	800225e <_free_r+0x22>
 80022b0:	6820      	ldr	r0, [r4, #0]
 80022b2:	1821      	adds	r1, r4, r0
 80022b4:	428b      	cmp	r3, r1
 80022b6:	bf01      	itttt	eq
 80022b8:	6819      	ldreq	r1, [r3, #0]
 80022ba:	685b      	ldreq	r3, [r3, #4]
 80022bc:	1809      	addeq	r1, r1, r0
 80022be:	6021      	streq	r1, [r4, #0]
 80022c0:	6063      	str	r3, [r4, #4]
 80022c2:	6054      	str	r4, [r2, #4]
 80022c4:	e7cb      	b.n	800225e <_free_r+0x22>
 80022c6:	bd38      	pop	{r3, r4, r5, pc}
 80022c8:	2000027c 	.word	0x2000027c

080022cc <sbrk_aligned>:
 80022cc:	b570      	push	{r4, r5, r6, lr}
 80022ce:	4e0f      	ldr	r6, [pc, #60]	@ (800230c <sbrk_aligned+0x40>)
 80022d0:	460c      	mov	r4, r1
 80022d2:	6831      	ldr	r1, [r6, #0]
 80022d4:	4605      	mov	r5, r0
 80022d6:	b911      	cbnz	r1, 80022de <sbrk_aligned+0x12>
 80022d8:	f000 fbaa 	bl	8002a30 <_sbrk_r>
 80022dc:	6030      	str	r0, [r6, #0]
 80022de:	4621      	mov	r1, r4
 80022e0:	4628      	mov	r0, r5
 80022e2:	f000 fba5 	bl	8002a30 <_sbrk_r>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	d103      	bne.n	80022f2 <sbrk_aligned+0x26>
 80022ea:	f04f 34ff 	mov.w	r4, #4294967295
 80022ee:	4620      	mov	r0, r4
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
 80022f2:	1cc4      	adds	r4, r0, #3
 80022f4:	f024 0403 	bic.w	r4, r4, #3
 80022f8:	42a0      	cmp	r0, r4
 80022fa:	d0f8      	beq.n	80022ee <sbrk_aligned+0x22>
 80022fc:	1a21      	subs	r1, r4, r0
 80022fe:	4628      	mov	r0, r5
 8002300:	f000 fb96 	bl	8002a30 <_sbrk_r>
 8002304:	3001      	adds	r0, #1
 8002306:	d1f2      	bne.n	80022ee <sbrk_aligned+0x22>
 8002308:	e7ef      	b.n	80022ea <sbrk_aligned+0x1e>
 800230a:	bf00      	nop
 800230c:	20000278 	.word	0x20000278

08002310 <_malloc_r>:
 8002310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002314:	1ccd      	adds	r5, r1, #3
 8002316:	f025 0503 	bic.w	r5, r5, #3
 800231a:	3508      	adds	r5, #8
 800231c:	2d0c      	cmp	r5, #12
 800231e:	bf38      	it	cc
 8002320:	250c      	movcc	r5, #12
 8002322:	2d00      	cmp	r5, #0
 8002324:	4606      	mov	r6, r0
 8002326:	db01      	blt.n	800232c <_malloc_r+0x1c>
 8002328:	42a9      	cmp	r1, r5
 800232a:	d904      	bls.n	8002336 <_malloc_r+0x26>
 800232c:	230c      	movs	r3, #12
 800232e:	6033      	str	r3, [r6, #0]
 8002330:	2000      	movs	r0, #0
 8002332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800240c <_malloc_r+0xfc>
 800233a:	f000 f869 	bl	8002410 <__malloc_lock>
 800233e:	f8d8 3000 	ldr.w	r3, [r8]
 8002342:	461c      	mov	r4, r3
 8002344:	bb44      	cbnz	r4, 8002398 <_malloc_r+0x88>
 8002346:	4629      	mov	r1, r5
 8002348:	4630      	mov	r0, r6
 800234a:	f7ff ffbf 	bl	80022cc <sbrk_aligned>
 800234e:	1c43      	adds	r3, r0, #1
 8002350:	4604      	mov	r4, r0
 8002352:	d158      	bne.n	8002406 <_malloc_r+0xf6>
 8002354:	f8d8 4000 	ldr.w	r4, [r8]
 8002358:	4627      	mov	r7, r4
 800235a:	2f00      	cmp	r7, #0
 800235c:	d143      	bne.n	80023e6 <_malloc_r+0xd6>
 800235e:	2c00      	cmp	r4, #0
 8002360:	d04b      	beq.n	80023fa <_malloc_r+0xea>
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	4639      	mov	r1, r7
 8002366:	4630      	mov	r0, r6
 8002368:	eb04 0903 	add.w	r9, r4, r3
 800236c:	f000 fb60 	bl	8002a30 <_sbrk_r>
 8002370:	4581      	cmp	r9, r0
 8002372:	d142      	bne.n	80023fa <_malloc_r+0xea>
 8002374:	6821      	ldr	r1, [r4, #0]
 8002376:	4630      	mov	r0, r6
 8002378:	1a6d      	subs	r5, r5, r1
 800237a:	4629      	mov	r1, r5
 800237c:	f7ff ffa6 	bl	80022cc <sbrk_aligned>
 8002380:	3001      	adds	r0, #1
 8002382:	d03a      	beq.n	80023fa <_malloc_r+0xea>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	442b      	add	r3, r5
 8002388:	6023      	str	r3, [r4, #0]
 800238a:	f8d8 3000 	ldr.w	r3, [r8]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	bb62      	cbnz	r2, 80023ec <_malloc_r+0xdc>
 8002392:	f8c8 7000 	str.w	r7, [r8]
 8002396:	e00f      	b.n	80023b8 <_malloc_r+0xa8>
 8002398:	6822      	ldr	r2, [r4, #0]
 800239a:	1b52      	subs	r2, r2, r5
 800239c:	d420      	bmi.n	80023e0 <_malloc_r+0xd0>
 800239e:	2a0b      	cmp	r2, #11
 80023a0:	d917      	bls.n	80023d2 <_malloc_r+0xc2>
 80023a2:	1961      	adds	r1, r4, r5
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	6025      	str	r5, [r4, #0]
 80023a8:	bf18      	it	ne
 80023aa:	6059      	strne	r1, [r3, #4]
 80023ac:	6863      	ldr	r3, [r4, #4]
 80023ae:	bf08      	it	eq
 80023b0:	f8c8 1000 	streq.w	r1, [r8]
 80023b4:	5162      	str	r2, [r4, r5]
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	4630      	mov	r0, r6
 80023ba:	f000 f82f 	bl	800241c <__malloc_unlock>
 80023be:	f104 000b 	add.w	r0, r4, #11
 80023c2:	1d23      	adds	r3, r4, #4
 80023c4:	f020 0007 	bic.w	r0, r0, #7
 80023c8:	1ac2      	subs	r2, r0, r3
 80023ca:	bf1c      	itt	ne
 80023cc:	1a1b      	subne	r3, r3, r0
 80023ce:	50a3      	strne	r3, [r4, r2]
 80023d0:	e7af      	b.n	8002332 <_malloc_r+0x22>
 80023d2:	6862      	ldr	r2, [r4, #4]
 80023d4:	42a3      	cmp	r3, r4
 80023d6:	bf0c      	ite	eq
 80023d8:	f8c8 2000 	streq.w	r2, [r8]
 80023dc:	605a      	strne	r2, [r3, #4]
 80023de:	e7eb      	b.n	80023b8 <_malloc_r+0xa8>
 80023e0:	4623      	mov	r3, r4
 80023e2:	6864      	ldr	r4, [r4, #4]
 80023e4:	e7ae      	b.n	8002344 <_malloc_r+0x34>
 80023e6:	463c      	mov	r4, r7
 80023e8:	687f      	ldr	r7, [r7, #4]
 80023ea:	e7b6      	b.n	800235a <_malloc_r+0x4a>
 80023ec:	461a      	mov	r2, r3
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	42a3      	cmp	r3, r4
 80023f2:	d1fb      	bne.n	80023ec <_malloc_r+0xdc>
 80023f4:	2300      	movs	r3, #0
 80023f6:	6053      	str	r3, [r2, #4]
 80023f8:	e7de      	b.n	80023b8 <_malloc_r+0xa8>
 80023fa:	230c      	movs	r3, #12
 80023fc:	4630      	mov	r0, r6
 80023fe:	6033      	str	r3, [r6, #0]
 8002400:	f000 f80c 	bl	800241c <__malloc_unlock>
 8002404:	e794      	b.n	8002330 <_malloc_r+0x20>
 8002406:	6005      	str	r5, [r0, #0]
 8002408:	e7d6      	b.n	80023b8 <_malloc_r+0xa8>
 800240a:	bf00      	nop
 800240c:	2000027c 	.word	0x2000027c

08002410 <__malloc_lock>:
 8002410:	4801      	ldr	r0, [pc, #4]	@ (8002418 <__malloc_lock+0x8>)
 8002412:	f7ff bf11 	b.w	8002238 <__retarget_lock_acquire_recursive>
 8002416:	bf00      	nop
 8002418:	20000274 	.word	0x20000274

0800241c <__malloc_unlock>:
 800241c:	4801      	ldr	r0, [pc, #4]	@ (8002424 <__malloc_unlock+0x8>)
 800241e:	f7ff bf0c 	b.w	800223a <__retarget_lock_release_recursive>
 8002422:	bf00      	nop
 8002424:	20000274 	.word	0x20000274

08002428 <__ssputs_r>:
 8002428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800242c:	461f      	mov	r7, r3
 800242e:	688e      	ldr	r6, [r1, #8]
 8002430:	4682      	mov	sl, r0
 8002432:	42be      	cmp	r6, r7
 8002434:	460c      	mov	r4, r1
 8002436:	4690      	mov	r8, r2
 8002438:	680b      	ldr	r3, [r1, #0]
 800243a:	d82d      	bhi.n	8002498 <__ssputs_r+0x70>
 800243c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002440:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002444:	d026      	beq.n	8002494 <__ssputs_r+0x6c>
 8002446:	6965      	ldr	r5, [r4, #20]
 8002448:	6909      	ldr	r1, [r1, #16]
 800244a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800244e:	eba3 0901 	sub.w	r9, r3, r1
 8002452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002456:	1c7b      	adds	r3, r7, #1
 8002458:	444b      	add	r3, r9
 800245a:	106d      	asrs	r5, r5, #1
 800245c:	429d      	cmp	r5, r3
 800245e:	bf38      	it	cc
 8002460:	461d      	movcc	r5, r3
 8002462:	0553      	lsls	r3, r2, #21
 8002464:	d527      	bpl.n	80024b6 <__ssputs_r+0x8e>
 8002466:	4629      	mov	r1, r5
 8002468:	f7ff ff52 	bl	8002310 <_malloc_r>
 800246c:	4606      	mov	r6, r0
 800246e:	b360      	cbz	r0, 80024ca <__ssputs_r+0xa2>
 8002470:	464a      	mov	r2, r9
 8002472:	6921      	ldr	r1, [r4, #16]
 8002474:	f000 fafa 	bl	8002a6c <memcpy>
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800247e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002482:	81a3      	strh	r3, [r4, #12]
 8002484:	6126      	str	r6, [r4, #16]
 8002486:	444e      	add	r6, r9
 8002488:	6026      	str	r6, [r4, #0]
 800248a:	463e      	mov	r6, r7
 800248c:	6165      	str	r5, [r4, #20]
 800248e:	eba5 0509 	sub.w	r5, r5, r9
 8002492:	60a5      	str	r5, [r4, #8]
 8002494:	42be      	cmp	r6, r7
 8002496:	d900      	bls.n	800249a <__ssputs_r+0x72>
 8002498:	463e      	mov	r6, r7
 800249a:	4632      	mov	r2, r6
 800249c:	4641      	mov	r1, r8
 800249e:	6820      	ldr	r0, [r4, #0]
 80024a0:	f000 faac 	bl	80029fc <memmove>
 80024a4:	2000      	movs	r0, #0
 80024a6:	68a3      	ldr	r3, [r4, #8]
 80024a8:	1b9b      	subs	r3, r3, r6
 80024aa:	60a3      	str	r3, [r4, #8]
 80024ac:	6823      	ldr	r3, [r4, #0]
 80024ae:	4433      	add	r3, r6
 80024b0:	6023      	str	r3, [r4, #0]
 80024b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024b6:	462a      	mov	r2, r5
 80024b8:	f000 fae6 	bl	8002a88 <_realloc_r>
 80024bc:	4606      	mov	r6, r0
 80024be:	2800      	cmp	r0, #0
 80024c0:	d1e0      	bne.n	8002484 <__ssputs_r+0x5c>
 80024c2:	4650      	mov	r0, sl
 80024c4:	6921      	ldr	r1, [r4, #16]
 80024c6:	f7ff feb9 	bl	800223c <_free_r>
 80024ca:	230c      	movs	r3, #12
 80024cc:	f8ca 3000 	str.w	r3, [sl]
 80024d0:	89a3      	ldrh	r3, [r4, #12]
 80024d2:	f04f 30ff 	mov.w	r0, #4294967295
 80024d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024da:	81a3      	strh	r3, [r4, #12]
 80024dc:	e7e9      	b.n	80024b2 <__ssputs_r+0x8a>
	...

080024e0 <_svfiprintf_r>:
 80024e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e4:	4698      	mov	r8, r3
 80024e6:	898b      	ldrh	r3, [r1, #12]
 80024e8:	4607      	mov	r7, r0
 80024ea:	061b      	lsls	r3, r3, #24
 80024ec:	460d      	mov	r5, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	b09d      	sub	sp, #116	@ 0x74
 80024f2:	d510      	bpl.n	8002516 <_svfiprintf_r+0x36>
 80024f4:	690b      	ldr	r3, [r1, #16]
 80024f6:	b973      	cbnz	r3, 8002516 <_svfiprintf_r+0x36>
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	f7ff ff09 	bl	8002310 <_malloc_r>
 80024fe:	6028      	str	r0, [r5, #0]
 8002500:	6128      	str	r0, [r5, #16]
 8002502:	b930      	cbnz	r0, 8002512 <_svfiprintf_r+0x32>
 8002504:	230c      	movs	r3, #12
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	b01d      	add	sp, #116	@ 0x74
 800250e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002512:	2340      	movs	r3, #64	@ 0x40
 8002514:	616b      	str	r3, [r5, #20]
 8002516:	2300      	movs	r3, #0
 8002518:	9309      	str	r3, [sp, #36]	@ 0x24
 800251a:	2320      	movs	r3, #32
 800251c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002520:	2330      	movs	r3, #48	@ 0x30
 8002522:	f04f 0901 	mov.w	r9, #1
 8002526:	f8cd 800c 	str.w	r8, [sp, #12]
 800252a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80026c4 <_svfiprintf_r+0x1e4>
 800252e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002532:	4623      	mov	r3, r4
 8002534:	469a      	mov	sl, r3
 8002536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800253a:	b10a      	cbz	r2, 8002540 <_svfiprintf_r+0x60>
 800253c:	2a25      	cmp	r2, #37	@ 0x25
 800253e:	d1f9      	bne.n	8002534 <_svfiprintf_r+0x54>
 8002540:	ebba 0b04 	subs.w	fp, sl, r4
 8002544:	d00b      	beq.n	800255e <_svfiprintf_r+0x7e>
 8002546:	465b      	mov	r3, fp
 8002548:	4622      	mov	r2, r4
 800254a:	4629      	mov	r1, r5
 800254c:	4638      	mov	r0, r7
 800254e:	f7ff ff6b 	bl	8002428 <__ssputs_r>
 8002552:	3001      	adds	r0, #1
 8002554:	f000 80a7 	beq.w	80026a6 <_svfiprintf_r+0x1c6>
 8002558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800255a:	445a      	add	r2, fp
 800255c:	9209      	str	r2, [sp, #36]	@ 0x24
 800255e:	f89a 3000 	ldrb.w	r3, [sl]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 809f 	beq.w	80026a6 <_svfiprintf_r+0x1c6>
 8002568:	2300      	movs	r3, #0
 800256a:	f04f 32ff 	mov.w	r2, #4294967295
 800256e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002572:	f10a 0a01 	add.w	sl, sl, #1
 8002576:	9304      	str	r3, [sp, #16]
 8002578:	9307      	str	r3, [sp, #28]
 800257a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800257e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002580:	4654      	mov	r4, sl
 8002582:	2205      	movs	r2, #5
 8002584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002588:	484e      	ldr	r0, [pc, #312]	@ (80026c4 <_svfiprintf_r+0x1e4>)
 800258a:	f000 fa61 	bl	8002a50 <memchr>
 800258e:	9a04      	ldr	r2, [sp, #16]
 8002590:	b9d8      	cbnz	r0, 80025ca <_svfiprintf_r+0xea>
 8002592:	06d0      	lsls	r0, r2, #27
 8002594:	bf44      	itt	mi
 8002596:	2320      	movmi	r3, #32
 8002598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800259c:	0711      	lsls	r1, r2, #28
 800259e:	bf44      	itt	mi
 80025a0:	232b      	movmi	r3, #43	@ 0x2b
 80025a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025a6:	f89a 3000 	ldrb.w	r3, [sl]
 80025aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80025ac:	d015      	beq.n	80025da <_svfiprintf_r+0xfa>
 80025ae:	4654      	mov	r4, sl
 80025b0:	2000      	movs	r0, #0
 80025b2:	f04f 0c0a 	mov.w	ip, #10
 80025b6:	9a07      	ldr	r2, [sp, #28]
 80025b8:	4621      	mov	r1, r4
 80025ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025be:	3b30      	subs	r3, #48	@ 0x30
 80025c0:	2b09      	cmp	r3, #9
 80025c2:	d94b      	bls.n	800265c <_svfiprintf_r+0x17c>
 80025c4:	b1b0      	cbz	r0, 80025f4 <_svfiprintf_r+0x114>
 80025c6:	9207      	str	r2, [sp, #28]
 80025c8:	e014      	b.n	80025f4 <_svfiprintf_r+0x114>
 80025ca:	eba0 0308 	sub.w	r3, r0, r8
 80025ce:	fa09 f303 	lsl.w	r3, r9, r3
 80025d2:	4313      	orrs	r3, r2
 80025d4:	46a2      	mov	sl, r4
 80025d6:	9304      	str	r3, [sp, #16]
 80025d8:	e7d2      	b.n	8002580 <_svfiprintf_r+0xa0>
 80025da:	9b03      	ldr	r3, [sp, #12]
 80025dc:	1d19      	adds	r1, r3, #4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	9103      	str	r1, [sp, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bfbb      	ittet	lt
 80025e6:	425b      	neglt	r3, r3
 80025e8:	f042 0202 	orrlt.w	r2, r2, #2
 80025ec:	9307      	strge	r3, [sp, #28]
 80025ee:	9307      	strlt	r3, [sp, #28]
 80025f0:	bfb8      	it	lt
 80025f2:	9204      	strlt	r2, [sp, #16]
 80025f4:	7823      	ldrb	r3, [r4, #0]
 80025f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80025f8:	d10a      	bne.n	8002610 <_svfiprintf_r+0x130>
 80025fa:	7863      	ldrb	r3, [r4, #1]
 80025fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80025fe:	d132      	bne.n	8002666 <_svfiprintf_r+0x186>
 8002600:	9b03      	ldr	r3, [sp, #12]
 8002602:	3402      	adds	r4, #2
 8002604:	1d1a      	adds	r2, r3, #4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	9203      	str	r2, [sp, #12]
 800260a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800260e:	9305      	str	r3, [sp, #20]
 8002610:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80026c8 <_svfiprintf_r+0x1e8>
 8002614:	2203      	movs	r2, #3
 8002616:	4650      	mov	r0, sl
 8002618:	7821      	ldrb	r1, [r4, #0]
 800261a:	f000 fa19 	bl	8002a50 <memchr>
 800261e:	b138      	cbz	r0, 8002630 <_svfiprintf_r+0x150>
 8002620:	2240      	movs	r2, #64	@ 0x40
 8002622:	9b04      	ldr	r3, [sp, #16]
 8002624:	eba0 000a 	sub.w	r0, r0, sl
 8002628:	4082      	lsls	r2, r0
 800262a:	4313      	orrs	r3, r2
 800262c:	3401      	adds	r4, #1
 800262e:	9304      	str	r3, [sp, #16]
 8002630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002634:	2206      	movs	r2, #6
 8002636:	4825      	ldr	r0, [pc, #148]	@ (80026cc <_svfiprintf_r+0x1ec>)
 8002638:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800263c:	f000 fa08 	bl	8002a50 <memchr>
 8002640:	2800      	cmp	r0, #0
 8002642:	d036      	beq.n	80026b2 <_svfiprintf_r+0x1d2>
 8002644:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <_svfiprintf_r+0x1f0>)
 8002646:	bb1b      	cbnz	r3, 8002690 <_svfiprintf_r+0x1b0>
 8002648:	9b03      	ldr	r3, [sp, #12]
 800264a:	3307      	adds	r3, #7
 800264c:	f023 0307 	bic.w	r3, r3, #7
 8002650:	3308      	adds	r3, #8
 8002652:	9303      	str	r3, [sp, #12]
 8002654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002656:	4433      	add	r3, r6
 8002658:	9309      	str	r3, [sp, #36]	@ 0x24
 800265a:	e76a      	b.n	8002532 <_svfiprintf_r+0x52>
 800265c:	460c      	mov	r4, r1
 800265e:	2001      	movs	r0, #1
 8002660:	fb0c 3202 	mla	r2, ip, r2, r3
 8002664:	e7a8      	b.n	80025b8 <_svfiprintf_r+0xd8>
 8002666:	2300      	movs	r3, #0
 8002668:	f04f 0c0a 	mov.w	ip, #10
 800266c:	4619      	mov	r1, r3
 800266e:	3401      	adds	r4, #1
 8002670:	9305      	str	r3, [sp, #20]
 8002672:	4620      	mov	r0, r4
 8002674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002678:	3a30      	subs	r2, #48	@ 0x30
 800267a:	2a09      	cmp	r2, #9
 800267c:	d903      	bls.n	8002686 <_svfiprintf_r+0x1a6>
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0c6      	beq.n	8002610 <_svfiprintf_r+0x130>
 8002682:	9105      	str	r1, [sp, #20]
 8002684:	e7c4      	b.n	8002610 <_svfiprintf_r+0x130>
 8002686:	4604      	mov	r4, r0
 8002688:	2301      	movs	r3, #1
 800268a:	fb0c 2101 	mla	r1, ip, r1, r2
 800268e:	e7f0      	b.n	8002672 <_svfiprintf_r+0x192>
 8002690:	ab03      	add	r3, sp, #12
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	462a      	mov	r2, r5
 8002696:	4638      	mov	r0, r7
 8002698:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <_svfiprintf_r+0x1f4>)
 800269a:	a904      	add	r1, sp, #16
 800269c:	f3af 8000 	nop.w
 80026a0:	1c42      	adds	r2, r0, #1
 80026a2:	4606      	mov	r6, r0
 80026a4:	d1d6      	bne.n	8002654 <_svfiprintf_r+0x174>
 80026a6:	89ab      	ldrh	r3, [r5, #12]
 80026a8:	065b      	lsls	r3, r3, #25
 80026aa:	f53f af2d 	bmi.w	8002508 <_svfiprintf_r+0x28>
 80026ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80026b0:	e72c      	b.n	800250c <_svfiprintf_r+0x2c>
 80026b2:	ab03      	add	r3, sp, #12
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	462a      	mov	r2, r5
 80026b8:	4638      	mov	r0, r7
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <_svfiprintf_r+0x1f4>)
 80026bc:	a904      	add	r1, sp, #16
 80026be:	f000 f87d 	bl	80027bc <_printf_i>
 80026c2:	e7ed      	b.n	80026a0 <_svfiprintf_r+0x1c0>
 80026c4:	08002b62 	.word	0x08002b62
 80026c8:	08002b68 	.word	0x08002b68
 80026cc:	08002b6c 	.word	0x08002b6c
 80026d0:	00000000 	.word	0x00000000
 80026d4:	08002429 	.word	0x08002429

080026d8 <_printf_common>:
 80026d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026dc:	4616      	mov	r6, r2
 80026de:	4698      	mov	r8, r3
 80026e0:	688a      	ldr	r2, [r1, #8]
 80026e2:	690b      	ldr	r3, [r1, #16]
 80026e4:	4607      	mov	r7, r0
 80026e6:	4293      	cmp	r3, r2
 80026e8:	bfb8      	it	lt
 80026ea:	4613      	movlt	r3, r2
 80026ec:	6033      	str	r3, [r6, #0]
 80026ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80026f2:	460c      	mov	r4, r1
 80026f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80026f8:	b10a      	cbz	r2, 80026fe <_printf_common+0x26>
 80026fa:	3301      	adds	r3, #1
 80026fc:	6033      	str	r3, [r6, #0]
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	0699      	lsls	r1, r3, #26
 8002702:	bf42      	ittt	mi
 8002704:	6833      	ldrmi	r3, [r6, #0]
 8002706:	3302      	addmi	r3, #2
 8002708:	6033      	strmi	r3, [r6, #0]
 800270a:	6825      	ldr	r5, [r4, #0]
 800270c:	f015 0506 	ands.w	r5, r5, #6
 8002710:	d106      	bne.n	8002720 <_printf_common+0x48>
 8002712:	f104 0a19 	add.w	sl, r4, #25
 8002716:	68e3      	ldr	r3, [r4, #12]
 8002718:	6832      	ldr	r2, [r6, #0]
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	42ab      	cmp	r3, r5
 800271e:	dc2b      	bgt.n	8002778 <_printf_common+0xa0>
 8002720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	3b00      	subs	r3, #0
 8002728:	bf18      	it	ne
 800272a:	2301      	movne	r3, #1
 800272c:	0692      	lsls	r2, r2, #26
 800272e:	d430      	bmi.n	8002792 <_printf_common+0xba>
 8002730:	4641      	mov	r1, r8
 8002732:	4638      	mov	r0, r7
 8002734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002738:	47c8      	blx	r9
 800273a:	3001      	adds	r0, #1
 800273c:	d023      	beq.n	8002786 <_printf_common+0xae>
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	6922      	ldr	r2, [r4, #16]
 8002742:	f003 0306 	and.w	r3, r3, #6
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf14      	ite	ne
 800274a:	2500      	movne	r5, #0
 800274c:	6833      	ldreq	r3, [r6, #0]
 800274e:	f04f 0600 	mov.w	r6, #0
 8002752:	bf08      	it	eq
 8002754:	68e5      	ldreq	r5, [r4, #12]
 8002756:	f104 041a 	add.w	r4, r4, #26
 800275a:	bf08      	it	eq
 800275c:	1aed      	subeq	r5, r5, r3
 800275e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002762:	bf08      	it	eq
 8002764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002768:	4293      	cmp	r3, r2
 800276a:	bfc4      	itt	gt
 800276c:	1a9b      	subgt	r3, r3, r2
 800276e:	18ed      	addgt	r5, r5, r3
 8002770:	42b5      	cmp	r5, r6
 8002772:	d11a      	bne.n	80027aa <_printf_common+0xd2>
 8002774:	2000      	movs	r0, #0
 8002776:	e008      	b.n	800278a <_printf_common+0xb2>
 8002778:	2301      	movs	r3, #1
 800277a:	4652      	mov	r2, sl
 800277c:	4641      	mov	r1, r8
 800277e:	4638      	mov	r0, r7
 8002780:	47c8      	blx	r9
 8002782:	3001      	adds	r0, #1
 8002784:	d103      	bne.n	800278e <_printf_common+0xb6>
 8002786:	f04f 30ff 	mov.w	r0, #4294967295
 800278a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800278e:	3501      	adds	r5, #1
 8002790:	e7c1      	b.n	8002716 <_printf_common+0x3e>
 8002792:	2030      	movs	r0, #48	@ 0x30
 8002794:	18e1      	adds	r1, r4, r3
 8002796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027a0:	4422      	add	r2, r4
 80027a2:	3302      	adds	r3, #2
 80027a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027a8:	e7c2      	b.n	8002730 <_printf_common+0x58>
 80027aa:	2301      	movs	r3, #1
 80027ac:	4622      	mov	r2, r4
 80027ae:	4641      	mov	r1, r8
 80027b0:	4638      	mov	r0, r7
 80027b2:	47c8      	blx	r9
 80027b4:	3001      	adds	r0, #1
 80027b6:	d0e6      	beq.n	8002786 <_printf_common+0xae>
 80027b8:	3601      	adds	r6, #1
 80027ba:	e7d9      	b.n	8002770 <_printf_common+0x98>

080027bc <_printf_i>:
 80027bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027c0:	7e0f      	ldrb	r7, [r1, #24]
 80027c2:	4691      	mov	r9, r2
 80027c4:	2f78      	cmp	r7, #120	@ 0x78
 80027c6:	4680      	mov	r8, r0
 80027c8:	460c      	mov	r4, r1
 80027ca:	469a      	mov	sl, r3
 80027cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80027ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80027d2:	d807      	bhi.n	80027e4 <_printf_i+0x28>
 80027d4:	2f62      	cmp	r7, #98	@ 0x62
 80027d6:	d80a      	bhi.n	80027ee <_printf_i+0x32>
 80027d8:	2f00      	cmp	r7, #0
 80027da:	f000 80d3 	beq.w	8002984 <_printf_i+0x1c8>
 80027de:	2f58      	cmp	r7, #88	@ 0x58
 80027e0:	f000 80ba 	beq.w	8002958 <_printf_i+0x19c>
 80027e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80027ec:	e03a      	b.n	8002864 <_printf_i+0xa8>
 80027ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80027f2:	2b15      	cmp	r3, #21
 80027f4:	d8f6      	bhi.n	80027e4 <_printf_i+0x28>
 80027f6:	a101      	add	r1, pc, #4	@ (adr r1, 80027fc <_printf_i+0x40>)
 80027f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027fc:	08002855 	.word	0x08002855
 8002800:	08002869 	.word	0x08002869
 8002804:	080027e5 	.word	0x080027e5
 8002808:	080027e5 	.word	0x080027e5
 800280c:	080027e5 	.word	0x080027e5
 8002810:	080027e5 	.word	0x080027e5
 8002814:	08002869 	.word	0x08002869
 8002818:	080027e5 	.word	0x080027e5
 800281c:	080027e5 	.word	0x080027e5
 8002820:	080027e5 	.word	0x080027e5
 8002824:	080027e5 	.word	0x080027e5
 8002828:	0800296b 	.word	0x0800296b
 800282c:	08002893 	.word	0x08002893
 8002830:	08002925 	.word	0x08002925
 8002834:	080027e5 	.word	0x080027e5
 8002838:	080027e5 	.word	0x080027e5
 800283c:	0800298d 	.word	0x0800298d
 8002840:	080027e5 	.word	0x080027e5
 8002844:	08002893 	.word	0x08002893
 8002848:	080027e5 	.word	0x080027e5
 800284c:	080027e5 	.word	0x080027e5
 8002850:	0800292d 	.word	0x0800292d
 8002854:	6833      	ldr	r3, [r6, #0]
 8002856:	1d1a      	adds	r2, r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6032      	str	r2, [r6, #0]
 800285c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002864:	2301      	movs	r3, #1
 8002866:	e09e      	b.n	80029a6 <_printf_i+0x1ea>
 8002868:	6833      	ldr	r3, [r6, #0]
 800286a:	6820      	ldr	r0, [r4, #0]
 800286c:	1d19      	adds	r1, r3, #4
 800286e:	6031      	str	r1, [r6, #0]
 8002870:	0606      	lsls	r6, r0, #24
 8002872:	d501      	bpl.n	8002878 <_printf_i+0xbc>
 8002874:	681d      	ldr	r5, [r3, #0]
 8002876:	e003      	b.n	8002880 <_printf_i+0xc4>
 8002878:	0645      	lsls	r5, r0, #25
 800287a:	d5fb      	bpl.n	8002874 <_printf_i+0xb8>
 800287c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002880:	2d00      	cmp	r5, #0
 8002882:	da03      	bge.n	800288c <_printf_i+0xd0>
 8002884:	232d      	movs	r3, #45	@ 0x2d
 8002886:	426d      	negs	r5, r5
 8002888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800288c:	230a      	movs	r3, #10
 800288e:	4859      	ldr	r0, [pc, #356]	@ (80029f4 <_printf_i+0x238>)
 8002890:	e011      	b.n	80028b6 <_printf_i+0xfa>
 8002892:	6821      	ldr	r1, [r4, #0]
 8002894:	6833      	ldr	r3, [r6, #0]
 8002896:	0608      	lsls	r0, r1, #24
 8002898:	f853 5b04 	ldr.w	r5, [r3], #4
 800289c:	d402      	bmi.n	80028a4 <_printf_i+0xe8>
 800289e:	0649      	lsls	r1, r1, #25
 80028a0:	bf48      	it	mi
 80028a2:	b2ad      	uxthmi	r5, r5
 80028a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80028a6:	6033      	str	r3, [r6, #0]
 80028a8:	bf14      	ite	ne
 80028aa:	230a      	movne	r3, #10
 80028ac:	2308      	moveq	r3, #8
 80028ae:	4851      	ldr	r0, [pc, #324]	@ (80029f4 <_printf_i+0x238>)
 80028b0:	2100      	movs	r1, #0
 80028b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80028b6:	6866      	ldr	r6, [r4, #4]
 80028b8:	2e00      	cmp	r6, #0
 80028ba:	bfa8      	it	ge
 80028bc:	6821      	ldrge	r1, [r4, #0]
 80028be:	60a6      	str	r6, [r4, #8]
 80028c0:	bfa4      	itt	ge
 80028c2:	f021 0104 	bicge.w	r1, r1, #4
 80028c6:	6021      	strge	r1, [r4, #0]
 80028c8:	b90d      	cbnz	r5, 80028ce <_printf_i+0x112>
 80028ca:	2e00      	cmp	r6, #0
 80028cc:	d04b      	beq.n	8002966 <_printf_i+0x1aa>
 80028ce:	4616      	mov	r6, r2
 80028d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80028d4:	fb03 5711 	mls	r7, r3, r1, r5
 80028d8:	5dc7      	ldrb	r7, [r0, r7]
 80028da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028de:	462f      	mov	r7, r5
 80028e0:	42bb      	cmp	r3, r7
 80028e2:	460d      	mov	r5, r1
 80028e4:	d9f4      	bls.n	80028d0 <_printf_i+0x114>
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d10b      	bne.n	8002902 <_printf_i+0x146>
 80028ea:	6823      	ldr	r3, [r4, #0]
 80028ec:	07df      	lsls	r7, r3, #31
 80028ee:	d508      	bpl.n	8002902 <_printf_i+0x146>
 80028f0:	6923      	ldr	r3, [r4, #16]
 80028f2:	6861      	ldr	r1, [r4, #4]
 80028f4:	4299      	cmp	r1, r3
 80028f6:	bfde      	ittt	le
 80028f8:	2330      	movle	r3, #48	@ 0x30
 80028fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80028fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002902:	1b92      	subs	r2, r2, r6
 8002904:	6122      	str	r2, [r4, #16]
 8002906:	464b      	mov	r3, r9
 8002908:	4621      	mov	r1, r4
 800290a:	4640      	mov	r0, r8
 800290c:	f8cd a000 	str.w	sl, [sp]
 8002910:	aa03      	add	r2, sp, #12
 8002912:	f7ff fee1 	bl	80026d8 <_printf_common>
 8002916:	3001      	adds	r0, #1
 8002918:	d14a      	bne.n	80029b0 <_printf_i+0x1f4>
 800291a:	f04f 30ff 	mov.w	r0, #4294967295
 800291e:	b004      	add	sp, #16
 8002920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f043 0320 	orr.w	r3, r3, #32
 800292a:	6023      	str	r3, [r4, #0]
 800292c:	2778      	movs	r7, #120	@ 0x78
 800292e:	4832      	ldr	r0, [pc, #200]	@ (80029f8 <_printf_i+0x23c>)
 8002930:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	6831      	ldr	r1, [r6, #0]
 8002938:	061f      	lsls	r7, r3, #24
 800293a:	f851 5b04 	ldr.w	r5, [r1], #4
 800293e:	d402      	bmi.n	8002946 <_printf_i+0x18a>
 8002940:	065f      	lsls	r7, r3, #25
 8002942:	bf48      	it	mi
 8002944:	b2ad      	uxthmi	r5, r5
 8002946:	6031      	str	r1, [r6, #0]
 8002948:	07d9      	lsls	r1, r3, #31
 800294a:	bf44      	itt	mi
 800294c:	f043 0320 	orrmi.w	r3, r3, #32
 8002950:	6023      	strmi	r3, [r4, #0]
 8002952:	b11d      	cbz	r5, 800295c <_printf_i+0x1a0>
 8002954:	2310      	movs	r3, #16
 8002956:	e7ab      	b.n	80028b0 <_printf_i+0xf4>
 8002958:	4826      	ldr	r0, [pc, #152]	@ (80029f4 <_printf_i+0x238>)
 800295a:	e7e9      	b.n	8002930 <_printf_i+0x174>
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	f023 0320 	bic.w	r3, r3, #32
 8002962:	6023      	str	r3, [r4, #0]
 8002964:	e7f6      	b.n	8002954 <_printf_i+0x198>
 8002966:	4616      	mov	r6, r2
 8002968:	e7bd      	b.n	80028e6 <_printf_i+0x12a>
 800296a:	6833      	ldr	r3, [r6, #0]
 800296c:	6825      	ldr	r5, [r4, #0]
 800296e:	1d18      	adds	r0, r3, #4
 8002970:	6961      	ldr	r1, [r4, #20]
 8002972:	6030      	str	r0, [r6, #0]
 8002974:	062e      	lsls	r6, r5, #24
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	d501      	bpl.n	800297e <_printf_i+0x1c2>
 800297a:	6019      	str	r1, [r3, #0]
 800297c:	e002      	b.n	8002984 <_printf_i+0x1c8>
 800297e:	0668      	lsls	r0, r5, #25
 8002980:	d5fb      	bpl.n	800297a <_printf_i+0x1be>
 8002982:	8019      	strh	r1, [r3, #0]
 8002984:	2300      	movs	r3, #0
 8002986:	4616      	mov	r6, r2
 8002988:	6123      	str	r3, [r4, #16]
 800298a:	e7bc      	b.n	8002906 <_printf_i+0x14a>
 800298c:	6833      	ldr	r3, [r6, #0]
 800298e:	2100      	movs	r1, #0
 8002990:	1d1a      	adds	r2, r3, #4
 8002992:	6032      	str	r2, [r6, #0]
 8002994:	681e      	ldr	r6, [r3, #0]
 8002996:	6862      	ldr	r2, [r4, #4]
 8002998:	4630      	mov	r0, r6
 800299a:	f000 f859 	bl	8002a50 <memchr>
 800299e:	b108      	cbz	r0, 80029a4 <_printf_i+0x1e8>
 80029a0:	1b80      	subs	r0, r0, r6
 80029a2:	6060      	str	r0, [r4, #4]
 80029a4:	6863      	ldr	r3, [r4, #4]
 80029a6:	6123      	str	r3, [r4, #16]
 80029a8:	2300      	movs	r3, #0
 80029aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029ae:	e7aa      	b.n	8002906 <_printf_i+0x14a>
 80029b0:	4632      	mov	r2, r6
 80029b2:	4649      	mov	r1, r9
 80029b4:	4640      	mov	r0, r8
 80029b6:	6923      	ldr	r3, [r4, #16]
 80029b8:	47d0      	blx	sl
 80029ba:	3001      	adds	r0, #1
 80029bc:	d0ad      	beq.n	800291a <_printf_i+0x15e>
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	079b      	lsls	r3, r3, #30
 80029c2:	d413      	bmi.n	80029ec <_printf_i+0x230>
 80029c4:	68e0      	ldr	r0, [r4, #12]
 80029c6:	9b03      	ldr	r3, [sp, #12]
 80029c8:	4298      	cmp	r0, r3
 80029ca:	bfb8      	it	lt
 80029cc:	4618      	movlt	r0, r3
 80029ce:	e7a6      	b.n	800291e <_printf_i+0x162>
 80029d0:	2301      	movs	r3, #1
 80029d2:	4632      	mov	r2, r6
 80029d4:	4649      	mov	r1, r9
 80029d6:	4640      	mov	r0, r8
 80029d8:	47d0      	blx	sl
 80029da:	3001      	adds	r0, #1
 80029dc:	d09d      	beq.n	800291a <_printf_i+0x15e>
 80029de:	3501      	adds	r5, #1
 80029e0:	68e3      	ldr	r3, [r4, #12]
 80029e2:	9903      	ldr	r1, [sp, #12]
 80029e4:	1a5b      	subs	r3, r3, r1
 80029e6:	42ab      	cmp	r3, r5
 80029e8:	dcf2      	bgt.n	80029d0 <_printf_i+0x214>
 80029ea:	e7eb      	b.n	80029c4 <_printf_i+0x208>
 80029ec:	2500      	movs	r5, #0
 80029ee:	f104 0619 	add.w	r6, r4, #25
 80029f2:	e7f5      	b.n	80029e0 <_printf_i+0x224>
 80029f4:	08002b73 	.word	0x08002b73
 80029f8:	08002b84 	.word	0x08002b84

080029fc <memmove>:
 80029fc:	4288      	cmp	r0, r1
 80029fe:	b510      	push	{r4, lr}
 8002a00:	eb01 0402 	add.w	r4, r1, r2
 8002a04:	d902      	bls.n	8002a0c <memmove+0x10>
 8002a06:	4284      	cmp	r4, r0
 8002a08:	4623      	mov	r3, r4
 8002a0a:	d807      	bhi.n	8002a1c <memmove+0x20>
 8002a0c:	1e43      	subs	r3, r0, #1
 8002a0e:	42a1      	cmp	r1, r4
 8002a10:	d008      	beq.n	8002a24 <memmove+0x28>
 8002a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a1a:	e7f8      	b.n	8002a0e <memmove+0x12>
 8002a1c:	4601      	mov	r1, r0
 8002a1e:	4402      	add	r2, r0
 8002a20:	428a      	cmp	r2, r1
 8002a22:	d100      	bne.n	8002a26 <memmove+0x2a>
 8002a24:	bd10      	pop	{r4, pc}
 8002a26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a2e:	e7f7      	b.n	8002a20 <memmove+0x24>

08002a30 <_sbrk_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	2300      	movs	r3, #0
 8002a34:	4d05      	ldr	r5, [pc, #20]	@ (8002a4c <_sbrk_r+0x1c>)
 8002a36:	4604      	mov	r4, r0
 8002a38:	4608      	mov	r0, r1
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	f7fd fdc0 	bl	80005c0 <_sbrk>
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	d102      	bne.n	8002a4a <_sbrk_r+0x1a>
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	b103      	cbz	r3, 8002a4a <_sbrk_r+0x1a>
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
 8002a4c:	20000270 	.word	0x20000270

08002a50 <memchr>:
 8002a50:	4603      	mov	r3, r0
 8002a52:	b510      	push	{r4, lr}
 8002a54:	b2c9      	uxtb	r1, r1
 8002a56:	4402      	add	r2, r0
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	d101      	bne.n	8002a62 <memchr+0x12>
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e003      	b.n	8002a6a <memchr+0x1a>
 8002a62:	7804      	ldrb	r4, [r0, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d1f6      	bne.n	8002a58 <memchr+0x8>
 8002a6a:	bd10      	pop	{r4, pc}

08002a6c <memcpy>:
 8002a6c:	440a      	add	r2, r1
 8002a6e:	4291      	cmp	r1, r2
 8002a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a74:	d100      	bne.n	8002a78 <memcpy+0xc>
 8002a76:	4770      	bx	lr
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a7e:	4291      	cmp	r1, r2
 8002a80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a84:	d1f9      	bne.n	8002a7a <memcpy+0xe>
 8002a86:	bd10      	pop	{r4, pc}

08002a88 <_realloc_r>:
 8002a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a8c:	4680      	mov	r8, r0
 8002a8e:	4615      	mov	r5, r2
 8002a90:	460c      	mov	r4, r1
 8002a92:	b921      	cbnz	r1, 8002a9e <_realloc_r+0x16>
 8002a94:	4611      	mov	r1, r2
 8002a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a9a:	f7ff bc39 	b.w	8002310 <_malloc_r>
 8002a9e:	b92a      	cbnz	r2, 8002aac <_realloc_r+0x24>
 8002aa0:	f7ff fbcc 	bl	800223c <_free_r>
 8002aa4:	2400      	movs	r4, #0
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002aac:	f000 f81a 	bl	8002ae4 <_malloc_usable_size_r>
 8002ab0:	4285      	cmp	r5, r0
 8002ab2:	4606      	mov	r6, r0
 8002ab4:	d802      	bhi.n	8002abc <_realloc_r+0x34>
 8002ab6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002aba:	d8f4      	bhi.n	8002aa6 <_realloc_r+0x1e>
 8002abc:	4629      	mov	r1, r5
 8002abe:	4640      	mov	r0, r8
 8002ac0:	f7ff fc26 	bl	8002310 <_malloc_r>
 8002ac4:	4607      	mov	r7, r0
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d0ec      	beq.n	8002aa4 <_realloc_r+0x1c>
 8002aca:	42b5      	cmp	r5, r6
 8002acc:	462a      	mov	r2, r5
 8002ace:	4621      	mov	r1, r4
 8002ad0:	bf28      	it	cs
 8002ad2:	4632      	movcs	r2, r6
 8002ad4:	f7ff ffca 	bl	8002a6c <memcpy>
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4640      	mov	r0, r8
 8002adc:	f7ff fbae 	bl	800223c <_free_r>
 8002ae0:	463c      	mov	r4, r7
 8002ae2:	e7e0      	b.n	8002aa6 <_realloc_r+0x1e>

08002ae4 <_malloc_usable_size_r>:
 8002ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ae8:	1f18      	subs	r0, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bfbc      	itt	lt
 8002aee:	580b      	ldrlt	r3, [r1, r0]
 8002af0:	18c0      	addlt	r0, r0, r3
 8002af2:	4770      	bx	lr

08002af4 <_init>:
 8002af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af6:	bf00      	nop
 8002af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afa:	bc08      	pop	{r3}
 8002afc:	469e      	mov	lr, r3
 8002afe:	4770      	bx	lr

08002b00 <_fini>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr
